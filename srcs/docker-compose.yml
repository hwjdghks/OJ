services:
  npm:
    image: jc21/nginx-proxy-manager
    container_name: npm
    restart: always
    depends_on:
      - frontend
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - ./srcs/.env/db_host.env
      - ./srcs/.env/npm.env
    volumes:
      - ./requirements/npm/data:/data
      - ./requirements/npm/letsencrypt:/etc/letsencrypt
    networks:
      - main_services

  core:
    build: ./requirements/core
    container_name: core
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./srcs/.env/rabbitmq.env
      - ./srcs/.env/openai.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - main_services

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    healthcheck:
      test: >
            rabbitmq-diagnostics -q check_running &&
            rabbitmq-diagnostics -q check_local_alarms
      interval: 10s
      retries: 60
    env_file:
      - ./srcs/.env/rabbitmq.env
    networks:
      - main_services

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    healthcheck:
      test: "mysql -uroot -p${MYSQL_ROOT_PASSWORD} ${MYSQL_DATABASE} -e 'select 1'"
      interval: 10s
      retries: 60
    env_file:
      - ./srcs/.env/db_host.env
      - ./srcs/.env/mysql.env
    volumes:
      - ./requirements/mysql/conf/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./requirements/mysql/conf/my.cnf:/etc/mysql/my.cnf
      - ./requirements/mysql/data:/var/lib/mysql
    networks:
      - main_services

  frontend:
    build: ./requirements/frontend
    container_name: frontend
    restart: always
    depends_on:
      - backend
    networks:
      - main_services

  backend:
    build: ./requirements/backend
    container_name: backend
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./srcs/.env/db_host.env
      - ./srcs/.env/mysql.env
      - ./srcs/.env/rabbitmq.env
    networks:
      - main_services

networks:
  main_services:
    driver: bridge
