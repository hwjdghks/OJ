services:
  npm:
    container_name: npm
    image: jc21/nginx-proxy-manager
    restart: always
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - ./.envfiles/db_host.env
      - ./.envfiles/npm.env
    volumes:
      - ./requirements/npm/data:/data
      - ./requirements/npm/letsencrypt:/etc/letsencrypt
      - ./requirements/npm/nginx-stream.conf:/data/nginx/stream/nginx-stream.conf
    networks:
      - main_services

  core:
    container_name: core
    build: ./requirements/core
    init: true
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./.envfiles/rabbitmq.env
      - ./.envfiles/openai.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./requirements/core/tools/data:/app/tools/data
    networks:
      - main_services

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    init: true
    restart: always
    healthcheck:
      test: >
            rabbitmq-diagnostics -q check_running &&
            rabbitmq-diagnostics -q check_local_alarms
      interval: 10s
      retries: 60
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_ADMIN_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_ADMIN_PASSWORD}
    networks:
      - main_services

  mysql:
    container_name: mysql
    image: mysql:8.0
    init: true
    restart: always
    ports:
      - "3306:3306"
    healthcheck:
      test: "mysql -uroot -p$${MYSQL_ROOT_PASSWORD} $${MYSQL_DATABASE} -e 'select 1'"
      interval: 10s
      retries: 60
    env_file:
      - ./.envfiles/db_host.env
      - ./.envfiles/mysql.env
    volumes:
      - ./requirements/mysql/conf/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./requirements/mysql/conf/my.cnf:/etc/mysql/my.cnf
      - ./requirements/mysql/data:/var/lib/mysql
    networks:
      - main_services

  frontend:
    container_name: frontend
    build: ./requirements/frontend
    init: true
    restart: always
    depends_on:
      - backend
    networks:
      - main_services

  backend:
    container_name: backend
    build: ./requirements/backend
    init: true
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./.envfiles/db_host.env
      - ./.envfiles/mysql.env
      - ./.envfiles/rabbitmq.env
      - ./.envfiles/crypto.env
    networks:
      - main_services

networks:
  main_services:
    name: main_services
    driver: bridge
